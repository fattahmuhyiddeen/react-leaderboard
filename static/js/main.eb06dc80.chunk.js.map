{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","__DEV__","process","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","isSoundAlert","getDataFromApi","request","XMLHttpRequest","onreadystatechange","e","readyState","status","JSON","parse","responseText","sort","a","b","point","setState","toast","dismiss","success","position","POSITION","BOTTOM_RIGHT","pauseOnFocusLoss","error","open","send","setInterval","_this2","react_default","createElement","Fragment","react_sound_lib_default","url","autoLoad","ignoreMobileRestrictions","playStatus","Sound","PLAYING","playFromPosition","onFinishedPlaying","dist","polling","enabled","render","_ref","online","style","top","alignSelf","left","right","height","backgroundColor","color","alignItems","justifyContent","className","src","logo","alt","map","item","index","key","id","concat","user_name","lib","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb06dc80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Detector } from \"react-detect-offline\";\nimport Sound from 'react-sound';\n\nconst __DEV__ = !process.env.NODE_ENV || process.env.NODE_ENV === 'development'\n\nclass App extends Component {\n  state = {\n    data: [],\n    isSoundAlert: false\n  }\n  constructor(p) {\n    super(p)\n    this.getDataFromApi()\n    setInterval(this.getDataFromApi, 10000)\n  }\n\n  getDataFromApi = () => {\n    var request = new XMLHttpRequest();\n    request.onreadystatechange = (e) => {\n      if (request.readyState !== 4) {\n        return;\n      }\n\n      if (request.status === 200) {\n        let data = JSON.parse(request.responseText)\n        data = data.sort((a, b) => b.point - a.point)\n        this.setState({ data, isSoundAlert: true })\n        toast.dismiss();\n        toast.success(\"Table refreshed !\", {\n          position: toast.POSITION.BOTTOM_RIGHT,\n          pauseOnFocusLoss: true\n        });\n      } else {\n        toast.dismiss();\n        this.setState({ isSoundAlert: true })\n\n        toast.error(\"Cannot get data\", {\n          position: toast.POSITION.BOTTOM_RIGHT,\n          pauseOnFocusLoss: true\n        });\n      }\n    };\n\n    request.open('GET', (__DEV__ ? 'http://localhost:1323' : '') + '/user_with_most_chop');\n    request.send();\n  }\n  render() {\n    return (\n      <>\n        {\n          this.state.isSoundAlert && <Sound\n            url={__DEV__ ? \"pop.mp3\" : \"/public/html/leaderboard/pop.mp3\"}\n            autoLoad\n            ignoreMobileRestrictions\n            playStatus={Sound.status.PLAYING}\n            playFromPosition={0 /* in milliseconds */}\n            // onLoading={this.handleSongLoading}\n            // onPlaying={this.handleSongPlaying}\n            onFinishedPlaying={() => this.setState({ isSoundAlert: false })}\n          />\n        }\n        <Detector polling={{ url: (__DEV__ ? 'https://api.rewards.nexlife.com.my' : '') + '/timestamp', enabled: true }} render={({ online: isOnline }) => {\n          if (isOnline) return false\n          return <div style={{ position: 'absolute', top: 0, alignSelf: 'center', left: 0, right: 0, height: 50, backgroundColor: 'red', color: 'white', alignItems: 'center', justifyContent: 'center' }}> Opps, you are offline</div>\n        }} />\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n            <table>\n              <tbody>\n                <tr>\n                  <th className=\"tableHeader\">Rank #</th>\n                  <th>Name</th>\n                  <th>Points</th>\n                </tr>\n                {this.state.data.map((item, index) => {\n                  return (\n                    <tr key={index} id={`row${index}`}>\n                      <td id={`cell${index}-{index1}`}>{index + 1}</td>\n                      <td id={`cell${index}-{index2}`}>{item.user_name}</td>\n                      <td id={`cell${index}-{index3}`}>{item.point}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </header>\n\n          <ToastContainer pauseOnFocusLoss={true} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}